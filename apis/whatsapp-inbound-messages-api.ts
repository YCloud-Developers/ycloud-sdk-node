/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, USER_AGENT, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
/**
 * WhatsappInboundMessagesApi - axios parameter creator
 * @export
 */
const WhatsappInboundMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read. Messages marked as read display two blue check marks alongside their timestamp.  Marking a message as read will also mark earlier messages in the conversation as read.
         * @summary Mark message as read
         * @param {string} id ID of the message.  A wamid (i.e., the original message ID on WhatsApp\&#39;s platform) is also acceptable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('markAsRead', 'id', id)
            const localVarPath = `/whatsapp/inboundMessages/{id}/markAsRead`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read and display a typing indicator so the WhatsApp user knows you are preparing a response. Messages marked as read display two blue check marks alongside their timestamp.The typing indicator will be dismissed once you respond, or after 25 seconds, whichever comes first. To prevent a poor user experience, only display a typing indicator if you are going to respond.  Marking a message as read will also mark earlier messages in the conversation as read.
         * @summary Mark message as read and display a typing indicator
         * @param {string} id ID of the message.  A wamid (i.e., the original message ID on WhatsApp\&#39;s platform) is also acceptable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typingIndicator: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('typingIndicator', 'id', id)
            const localVarPath = `/whatsapp/inboundMessages/{id}/typingIndicator`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhatsappInboundMessagesApi - functional programming interface
 * @export
 */
const WhatsappInboundMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhatsappInboundMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read. Messages marked as read display two blue check marks alongside their timestamp.  Marking a message as read will also mark earlier messages in the conversation as read.
         * @summary Mark message as read
         * @param {string} id ID of the message.  A wamid (i.e., the original message ID on WhatsApp\&#39;s platform) is also acceptable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read and display a typing indicator so the WhatsApp user knows you are preparing a response. Messages marked as read display two blue check marks alongside their timestamp.The typing indicator will be dismissed once you respond, or after 25 seconds, whichever comes first. To prevent a poor user experience, only display a typing indicator if you are going to respond.  Marking a message as read will also mark earlier messages in the conversation as read.
         * @summary Mark message as read and display a typing indicator
         * @param {string} id ID of the message.  A wamid (i.e., the original message ID on WhatsApp\&#39;s platform) is also acceptable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typingIndicator(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typingIndicator(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WhatsappInboundMessagesApi - factory interface
 * @export
 */
const WhatsappInboundMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhatsappInboundMessagesApiFp(configuration)
    return {
        /**
         * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read. Messages marked as read display two blue check marks alongside their timestamp.  Marking a message as read will also mark earlier messages in the conversation as read.
         * @summary Mark message as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.markAsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read and display a typing indicator so the WhatsApp user knows you are preparing a response. Messages marked as read display two blue check marks alongside their timestamp.The typing indicator will be dismissed once you respond, or after 25 seconds, whichever comes first. To prevent a poor user experience, only display a typing indicator if you are going to respond.  Marking a message as read will also mark earlier messages in the conversation as read.
         * @summary Mark message as read and display a typing indicator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typingIndicator(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.typingIndicator(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhatsappInboundMessagesApi - object-oriented interface
 * @export
 * @class WhatsappInboundMessagesApi
 * @extends {BaseAPI}
 */
export class WhatsappInboundMessagesApi extends BaseAPI {
    /**
     * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read. Messages marked as read display two blue check marks alongside their timestamp.  Marking a message as read will also mark earlier messages in the conversation as read.
     * @summary Mark message as read
     * @param {string} id ID of the message.  A wamid (i.e., the original message ID on WhatsApp\&#39;s platform) is also acceptable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappInboundMessagesApi
     */
    public markAsRead(id: string, options?: AxiosRequestConfig) {
        return WhatsappInboundMessagesApiFp(this.configuration).markAsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When you receive an inbound message from webhooks, you can use this endpoint to mark the message as read and display a typing indicator so the WhatsApp user knows you are preparing a response. Messages marked as read display two blue check marks alongside their timestamp.The typing indicator will be dismissed once you respond, or after 25 seconds, whichever comes first. To prevent a poor user experience, only display a typing indicator if you are going to respond.  Marking a message as read will also mark earlier messages in the conversation as read.
     * @summary Mark message as read and display a typing indicator
     * @param {string} id ID of the message.  A wamid (i.e., the original message ID on WhatsApp\&#39;s platform) is also acceptable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappInboundMessagesApi
     */
    public typingIndicator(id: string, options?: AxiosRequestConfig) {
        return WhatsappInboundMessagesApiFp(this.configuration).typingIndicator(id, options).then((request) => request(this.axios, this.basePath));
    }
}
