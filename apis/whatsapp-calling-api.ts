/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, USER_AGENT, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { WhatsappCallingConnectRequest } from '../models';
// @ts-ignore
import { WhatsappCallingPreAcceptRequest } from '../models';
// @ts-ignore
import { WhatsappCallingResponse } from '../models';
// @ts-ignore
import { WhatsappCallingTerminateRequest } from '../models';
/**
 * WhatsappCallingApi - axios parameter creator
 * @export
 */
const WhatsappCallingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts an inbound WhatsApp call.  Once the WebRTC connection is made, this endpoint is used to accept the call. Media will begin flowing immediately since the connection was established prior to call connect.
         * @summary Accept a call
         * @param {WhatsappCallingPreAcceptRequest} whatsappCallingPreAcceptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accept: async (whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappCallingPreAcceptRequest' is not null or undefined
            assertParamExists('accept', 'whatsappCallingPreAcceptRequest', whatsappCallingPreAcceptRequest)
            const localVarPath = `/whatsapp/calls/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappCallingPreAcceptRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates a WhatsApp call connection.  Establishes the initial connection for a WhatsApp call by providing SDP offer information. This endpoint is used for business-initiated calling scenarios.
         * @summary Connect a call
         * @param {WhatsappCallingConnectRequest} whatsappCallingConnectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connect: async (whatsappCallingConnectRequest: WhatsappCallingConnectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappCallingConnectRequest' is not null or undefined
            assertParamExists('connect', 'whatsappCallingConnectRequest', whatsappCallingConnectRequest)
            const localVarPath = `/whatsapp/calls/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappCallingConnectRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Pre-accepts an inbound WhatsApp call.  Pre-accepting calls allows the calling media connection to be established before attempting to send call media through the connection. This facilitates faster connection times and avoids audio clipping issues.
         * @summary Pre-accept a call
         * @param {WhatsappCallingPreAcceptRequest} whatsappCallingPreAcceptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preAccept: async (whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappCallingPreAcceptRequest' is not null or undefined
            assertParamExists('preAccept', 'whatsappCallingPreAcceptRequest', whatsappCallingPreAcceptRequest)
            const localVarPath = `/whatsapp/calls/preAccept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappCallingPreAcceptRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Rejects an inbound WhatsApp call.  This endpoint is used to reject an incoming call from a WhatsApp user. The call will be terminated on the WhatsApp user side with appropriate notification.
         * @summary Reject a call
         * @param {WhatsappCallingTerminateRequest} whatsappCallingTerminateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reject: async (whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappCallingTerminateRequest' is not null or undefined
            assertParamExists('reject', 'whatsappCallingTerminateRequest', whatsappCallingTerminateRequest)
            const localVarPath = `/whatsapp/calls/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappCallingTerminateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Terminates an active WhatsApp call.  Both the business or the WhatsApp user can terminate the call at any time. This endpoint is used by the business to end the call.
         * @summary Terminate a call
         * @param {WhatsappCallingTerminateRequest} whatsappCallingTerminateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminate: async (whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappCallingTerminateRequest' is not null or undefined
            assertParamExists('terminate', 'whatsappCallingTerminateRequest', whatsappCallingTerminateRequest)
            const localVarPath = `/whatsapp/calls/terminate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappCallingTerminateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhatsappCallingApi - functional programming interface
 * @export
 */
const WhatsappCallingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhatsappCallingApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts an inbound WhatsApp call.  Once the WebRTC connection is made, this endpoint is used to accept the call. Media will begin flowing immediately since the connection was established prior to call connect.
         * @summary Accept a call
         * @param {WhatsappCallingPreAcceptRequest} whatsappCallingPreAcceptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accept(whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappCallingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accept(whatsappCallingPreAcceptRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates a WhatsApp call connection.  Establishes the initial connection for a WhatsApp call by providing SDP offer information. This endpoint is used for business-initiated calling scenarios.
         * @summary Connect a call
         * @param {WhatsappCallingConnectRequest} whatsappCallingConnectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connect(whatsappCallingConnectRequest: WhatsappCallingConnectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappCallingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connect(whatsappCallingConnectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pre-accepts an inbound WhatsApp call.  Pre-accepting calls allows the calling media connection to be established before attempting to send call media through the connection. This facilitates faster connection times and avoids audio clipping issues.
         * @summary Pre-accept a call
         * @param {WhatsappCallingPreAcceptRequest} whatsappCallingPreAcceptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preAccept(whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappCallingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preAccept(whatsappCallingPreAcceptRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rejects an inbound WhatsApp call.  This endpoint is used to reject an incoming call from a WhatsApp user. The call will be terminated on the WhatsApp user side with appropriate notification.
         * @summary Reject a call
         * @param {WhatsappCallingTerminateRequest} whatsappCallingTerminateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reject(whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappCallingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reject(whatsappCallingTerminateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Terminates an active WhatsApp call.  Both the business or the WhatsApp user can terminate the call at any time. This endpoint is used by the business to end the call.
         * @summary Terminate a call
         * @param {WhatsappCallingTerminateRequest} whatsappCallingTerminateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminate(whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappCallingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminate(whatsappCallingTerminateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WhatsappCallingApi - factory interface
 * @export
 */
const WhatsappCallingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhatsappCallingApiFp(configuration)
    return {
        /**
         * Accepts an inbound WhatsApp call.  Once the WebRTC connection is made, this endpoint is used to accept the call. Media will begin flowing immediately since the connection was established prior to call connect.
         * @summary Accept a call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accept(whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options?: any): AxiosPromise<WhatsappCallingResponse> {
            return localVarFp.accept(whatsappCallingPreAcceptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates a WhatsApp call connection.  Establishes the initial connection for a WhatsApp call by providing SDP offer information. This endpoint is used for business-initiated calling scenarios.
         * @summary Connect a call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connect(whatsappCallingConnectRequest: WhatsappCallingConnectRequest, options?: any): AxiosPromise<WhatsappCallingResponse> {
            return localVarFp.connect(whatsappCallingConnectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Pre-accepts an inbound WhatsApp call.  Pre-accepting calls allows the calling media connection to be established before attempting to send call media through the connection. This facilitates faster connection times and avoids audio clipping issues.
         * @summary Pre-accept a call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preAccept(whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options?: any): AxiosPromise<WhatsappCallingResponse> {
            return localVarFp.preAccept(whatsappCallingPreAcceptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Rejects an inbound WhatsApp call.  This endpoint is used to reject an incoming call from a WhatsApp user. The call will be terminated on the WhatsApp user side with appropriate notification.
         * @summary Reject a call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reject(whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options?: any): AxiosPromise<WhatsappCallingResponse> {
            return localVarFp.reject(whatsappCallingTerminateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Terminates an active WhatsApp call.  Both the business or the WhatsApp user can terminate the call at any time. This endpoint is used by the business to end the call.
         * @summary Terminate a call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminate(whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options?: any): AxiosPromise<WhatsappCallingResponse> {
            return localVarFp.terminate(whatsappCallingTerminateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhatsappCallingApi - object-oriented interface
 * @export
 * @class WhatsappCallingApi
 * @extends {BaseAPI}
 */
export class WhatsappCallingApi extends BaseAPI {
    /**
     * Accepts an inbound WhatsApp call.  Once the WebRTC connection is made, this endpoint is used to accept the call. Media will begin flowing immediately since the connection was established prior to call connect.
     * @summary Accept a call
     * @param {WhatsappCallingPreAcceptRequest} whatsappCallingPreAcceptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappCallingApi
     */
    public accept(whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options?: AxiosRequestConfig) {
        return WhatsappCallingApiFp(this.configuration).accept(whatsappCallingPreAcceptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates a WhatsApp call connection.  Establishes the initial connection for a WhatsApp call by providing SDP offer information. This endpoint is used for business-initiated calling scenarios.
     * @summary Connect a call
     * @param {WhatsappCallingConnectRequest} whatsappCallingConnectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappCallingApi
     */
    public connect(whatsappCallingConnectRequest: WhatsappCallingConnectRequest, options?: AxiosRequestConfig) {
        return WhatsappCallingApiFp(this.configuration).connect(whatsappCallingConnectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pre-accepts an inbound WhatsApp call.  Pre-accepting calls allows the calling media connection to be established before attempting to send call media through the connection. This facilitates faster connection times and avoids audio clipping issues.
     * @summary Pre-accept a call
     * @param {WhatsappCallingPreAcceptRequest} whatsappCallingPreAcceptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappCallingApi
     */
    public preAccept(whatsappCallingPreAcceptRequest: WhatsappCallingPreAcceptRequest, options?: AxiosRequestConfig) {
        return WhatsappCallingApiFp(this.configuration).preAccept(whatsappCallingPreAcceptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rejects an inbound WhatsApp call.  This endpoint is used to reject an incoming call from a WhatsApp user. The call will be terminated on the WhatsApp user side with appropriate notification.
     * @summary Reject a call
     * @param {WhatsappCallingTerminateRequest} whatsappCallingTerminateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappCallingApi
     */
    public reject(whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options?: AxiosRequestConfig) {
        return WhatsappCallingApiFp(this.configuration).reject(whatsappCallingTerminateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Terminates an active WhatsApp call.  Both the business or the WhatsApp user can terminate the call at any time. This endpoint is used by the business to end the call.
     * @summary Terminate a call
     * @param {WhatsappCallingTerminateRequest} whatsappCallingTerminateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappCallingApi
     */
    public terminate(whatsappCallingTerminateRequest: WhatsappCallingTerminateRequest, options?: AxiosRequestConfig) {
        return WhatsappCallingApiFp(this.configuration).terminate(whatsappCallingTerminateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
