/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, USER_AGENT, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WhatsappFlow } from '../models';
// @ts-ignore
import { WhatsappFlowCreate200Response } from '../models';
// @ts-ignore
import { WhatsappFlowCreate400Response } from '../models';
// @ts-ignore
import { WhatsappFlowCreateRequest } from '../models';
// @ts-ignore
import { WhatsappFlowList200Response } from '../models';
// @ts-ignore
import { WhatsappFlowPreviewUrl } from '../models';
// @ts-ignore
import { WhatsappFlowUpdateMetadata200Response } from '../models';
// @ts-ignore
import { WhatsappFlowUpdateMetadataRequest } from '../models';
/**
 * WhatsappFlowsApi - axios parameter creator
 * @export
 */
const WhatsappFlowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new WhatsApp Flow. New Flows are by default created in DRAFT state. You can create a new published Flow in single request by specifying flowJson and publish parameters.
         * @summary Create a flow
         * @param {WhatsappFlowCreateRequest} whatsappFlowCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (whatsappFlowCreateRequest: WhatsappFlowCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappFlowCreateRequest' is not null or undefined
            assertParamExists('create', 'whatsappFlowCreateRequest', whatsappFlowCreateRequest)
            const localVarPath = `/whatsapp/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappFlowCreateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a WhatsApp Flow. Only Flows in DRAFT status can be deleted.
         * @summary Delete a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (flowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('delete', 'flowId', flowId)
            const localVarPath = `/whatsapp/flows/{flowId}`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a published Flow as deprecated. Once a Flow is published, it cannot be modified or deleted, but can be marked as deprecated.
         * @summary Deprecate a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deprecate: async (flowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('deprecate', 'flowId', flowId)
            const localVarPath = `/whatsapp/flows/{flowId}/deprecate`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of WhatsApp Flows under a WhatsApp Business Account (WABA).
         * @summary List flows
         * @param {string} wabaId WhatsApp Business Account ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (wabaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wabaId' is not null or undefined
            assertParamExists('list', 'wabaId', wabaId)
            const localVarPath = `/whatsapp/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (wabaId !== undefined) {
                localVarQueryParameter['wabaId'] = wabaId;
            }


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * In order to visualize the Flows created, you can generate a web preview URL with this request. **The preview URL is public and can be shared with different stakeholders to visualize the Flow.**.
         * @summary generate a web preview URL with this flow.
         * @param {string} flowId Flow ID.
         * @param {boolean} [invalidate] the link will expire in 30 days in default, or if you set with invalidate&#x3D;true which will generate a new link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preview: async (flowId: string, invalidate?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('preview', 'flowId', flowId)
            const localVarPath = `/whatsapp/flows/{flowId}/preview`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (invalidate !== undefined) {
                localVarQueryParameter['invalidate'] = invalidate;
            }


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the status of the Flow to \"PUBLISHED\". You can either edit this flow in the future and turn it back to the \"DRAFT\" state, or create a new flow by specifying the existing Flow ID as the cloneFlowId parameter.
         * @summary Publish a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publish: async (flowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('publish', 'flowId', flowId)
            const localVarPath = `/whatsapp/flows/{flowId}/publish`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a WhatsApp Flow\'s details.
         * @summary Retrieve a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (flowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('retrieve', 'flowId', flowId)
            const localVarPath = `/whatsapp/flows/{flowId}`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a WhatsApp Flow\'s metadata (name or categories).
         * @summary Update flow metadata
         * @param {string} flowId Flow ID.
         * @param {WhatsappFlowUpdateMetadataRequest} whatsappFlowUpdateMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadata: async (flowId: string, whatsappFlowUpdateMetadataRequest: WhatsappFlowUpdateMetadataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('updateMetadata', 'flowId', flowId)
            // verify required parameter 'whatsappFlowUpdateMetadataRequest' is not null or undefined
            assertParamExists('updateMetadata', 'whatsappFlowUpdateMetadataRequest', whatsappFlowUpdateMetadataRequest)
            const localVarPath = `/whatsapp/flows/{flowId}/metadata`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappFlowUpdateMetadataRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a WhatsApp Flow\'s structure. Note that the file must be attached as form-data.
         * @summary Update flow structure
         * @param {string} flowId Flow ID.
         * @param {any} flowJson JSON file containing the Flow structure.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStructure: async (flowId: string, flowJson: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('updateStructure', 'flowId', flowId)
            // verify required parameter 'flowJson' is not null or undefined
            assertParamExists('updateStructure', 'flowJson', flowJson)
            const localVarPath = `/whatsapp/flows/{flowId}/assets`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


            if (flowJson !== undefined) { 
                localVarFormParams.append('flowJson', flowJson as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhatsappFlowsApi - functional programming interface
 * @export
 */
const WhatsappFlowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhatsappFlowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new WhatsApp Flow. New Flows are by default created in DRAFT state. You can create a new published Flow in single request by specifying flowJson and publish parameters.
         * @summary Create a flow
         * @param {WhatsappFlowCreateRequest} whatsappFlowCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(whatsappFlowCreateRequest: WhatsappFlowCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(whatsappFlowCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a WhatsApp Flow. Only Flows in DRAFT status can be deleted.
         * @summary Delete a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(flowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowUpdateMetadata200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(flowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a published Flow as deprecated. Once a Flow is published, it cannot be modified or deleted, but can be marked as deprecated.
         * @summary Deprecate a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deprecate(flowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowUpdateMetadata200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deprecate(flowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of WhatsApp Flows under a WhatsApp Business Account (WABA).
         * @summary List flows
         * @param {string} wabaId WhatsApp Business Account ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(wabaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(wabaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * In order to visualize the Flows created, you can generate a web preview URL with this request. **The preview URL is public and can be shared with different stakeholders to visualize the Flow.**.
         * @summary generate a web preview URL with this flow.
         * @param {string} flowId Flow ID.
         * @param {boolean} [invalidate] the link will expire in 30 days in default, or if you set with invalidate&#x3D;true which will generate a new link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preview(flowId: string, invalidate?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowPreviewUrl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preview(flowId, invalidate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the status of the Flow to \"PUBLISHED\". You can either edit this flow in the future and turn it back to the \"DRAFT\" state, or create a new flow by specifying the existing Flow ID as the cloneFlowId parameter.
         * @summary Publish a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publish(flowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowUpdateMetadata200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publish(flowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a WhatsApp Flow\'s details.
         * @summary Retrieve a flow
         * @param {string} flowId Flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(flowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(flowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a WhatsApp Flow\'s metadata (name or categories).
         * @summary Update flow metadata
         * @param {string} flowId Flow ID.
         * @param {WhatsappFlowUpdateMetadataRequest} whatsappFlowUpdateMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetadata(flowId: string, whatsappFlowUpdateMetadataRequest: WhatsappFlowUpdateMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowUpdateMetadata200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetadata(flowId, whatsappFlowUpdateMetadataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a WhatsApp Flow\'s structure. Note that the file must be attached as form-data.
         * @summary Update flow structure
         * @param {string} flowId Flow ID.
         * @param {any} flowJson JSON file containing the Flow structure.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStructure(flowId: string, flowJson: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappFlowUpdateMetadata200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStructure(flowId, flowJson, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WhatsappFlowsApi - factory interface
 * @export
 */
const WhatsappFlowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhatsappFlowsApiFp(configuration)
    return {
        /**
         * Creates a new WhatsApp Flow. New Flows are by default created in DRAFT state. You can create a new published Flow in single request by specifying flowJson and publish parameters.
         * @summary Create a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(whatsappFlowCreateRequest: WhatsappFlowCreateRequest, options?: any): AxiosPromise<WhatsappFlowCreate200Response> {
            return localVarFp.create(whatsappFlowCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a WhatsApp Flow. Only Flows in DRAFT status can be deleted.
         * @summary Delete a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(flowId: string, options?: any): AxiosPromise<WhatsappFlowUpdateMetadata200Response> {
            return localVarFp.delete(flowId, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a published Flow as deprecated. Once a Flow is published, it cannot be modified or deleted, but can be marked as deprecated.
         * @summary Deprecate a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deprecate(flowId: string, options?: any): AxiosPromise<WhatsappFlowUpdateMetadata200Response> {
            return localVarFp.deprecate(flowId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of WhatsApp Flows under a WhatsApp Business Account (WABA).
         * @summary List flows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(wabaId: string, options?: any): AxiosPromise<WhatsappFlowList200Response> {
            return localVarFp.list(wabaId, options).then((request) => request(axios, basePath));
        },
        /**
         * In order to visualize the Flows created, you can generate a web preview URL with this request. **The preview URL is public and can be shared with different stakeholders to visualize the Flow.**.
         * @summary generate a web preview URL with this flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preview(flowId: string, invalidate?: boolean, options?: any): AxiosPromise<WhatsappFlowPreviewUrl> {
            return localVarFp.preview(flowId, invalidate, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the status of the Flow to \"PUBLISHED\". You can either edit this flow in the future and turn it back to the \"DRAFT\" state, or create a new flow by specifying the existing Flow ID as the cloneFlowId parameter.
         * @summary Publish a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publish(flowId: string, options?: any): AxiosPromise<WhatsappFlowUpdateMetadata200Response> {
            return localVarFp.publish(flowId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a WhatsApp Flow\'s details.
         * @summary Retrieve a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(flowId: string, options?: any): AxiosPromise<WhatsappFlow> {
            return localVarFp.retrieve(flowId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a WhatsApp Flow\'s metadata (name or categories).
         * @summary Update flow metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadata(flowId: string, whatsappFlowUpdateMetadataRequest: WhatsappFlowUpdateMetadataRequest, options?: any): AxiosPromise<WhatsappFlowUpdateMetadata200Response> {
            return localVarFp.updateMetadata(flowId, whatsappFlowUpdateMetadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a WhatsApp Flow\'s structure. Note that the file must be attached as form-data.
         * @summary Update flow structure
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStructure(flowId: string, flowJson: any, options?: any): AxiosPromise<WhatsappFlowUpdateMetadata200Response> {
            return localVarFp.updateStructure(flowId, flowJson, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhatsappFlowsApi - object-oriented interface
 * @export
 * @class WhatsappFlowsApi
 * @extends {BaseAPI}
 */
export class WhatsappFlowsApi extends BaseAPI {
    /**
     * Creates a new WhatsApp Flow. New Flows are by default created in DRAFT state. You can create a new published Flow in single request by specifying flowJson and publish parameters.
     * @summary Create a flow
     * @param {WhatsappFlowCreateRequest} whatsappFlowCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public create(whatsappFlowCreateRequest: WhatsappFlowCreateRequest, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).create(whatsappFlowCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a WhatsApp Flow. Only Flows in DRAFT status can be deleted.
     * @summary Delete a flow
     * @param {string} flowId Flow ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public delete(flowId: string, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).delete(flowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a published Flow as deprecated. Once a Flow is published, it cannot be modified or deleted, but can be marked as deprecated.
     * @summary Deprecate a flow
     * @param {string} flowId Flow ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public deprecate(flowId: string, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).deprecate(flowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of WhatsApp Flows under a WhatsApp Business Account (WABA).
     * @summary List flows
     * @param {string} wabaId WhatsApp Business Account ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public list(wabaId: string, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).list(wabaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * In order to visualize the Flows created, you can generate a web preview URL with this request. **The preview URL is public and can be shared with different stakeholders to visualize the Flow.**.
     * @summary generate a web preview URL with this flow.
     * @param {string} flowId Flow ID.
     * @param {boolean} [invalidate] the link will expire in 30 days in default, or if you set with invalidate&#x3D;true which will generate a new link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public preview(flowId: string, invalidate?: boolean, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).preview(flowId, invalidate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the status of the Flow to \"PUBLISHED\". You can either edit this flow in the future and turn it back to the \"DRAFT\" state, or create a new flow by specifying the existing Flow ID as the cloneFlowId parameter.
     * @summary Publish a flow
     * @param {string} flowId Flow ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public publish(flowId: string, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).publish(flowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a WhatsApp Flow\'s details.
     * @summary Retrieve a flow
     * @param {string} flowId Flow ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public retrieve(flowId: string, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).retrieve(flowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a WhatsApp Flow\'s metadata (name or categories).
     * @summary Update flow metadata
     * @param {string} flowId Flow ID.
     * @param {WhatsappFlowUpdateMetadataRequest} whatsappFlowUpdateMetadataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public updateMetadata(flowId: string, whatsappFlowUpdateMetadataRequest: WhatsappFlowUpdateMetadataRequest, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).updateMetadata(flowId, whatsappFlowUpdateMetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a WhatsApp Flow\'s structure. Note that the file must be attached as form-data.
     * @summary Update flow structure
     * @param {string} flowId Flow ID.
     * @param {any} flowJson JSON file containing the Flow structure.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappFlowsApi
     */
    public updateStructure(flowId: string, flowJson: any, options?: AxiosRequestConfig) {
        return WhatsappFlowsApiFp(this.configuration).updateStructure(flowId, flowJson, options).then((request) => request(this.axios, this.basePath));
    }
}
