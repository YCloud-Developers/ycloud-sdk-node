/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, USER_AGENT, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomEventDefinition } from '../models';
// @ts-ignore
import { CustomEventDefinitionCreateRequest } from '../models';
// @ts-ignore
import { CustomEventDefinitionProperty } from '../models';
// @ts-ignore
import { CustomEventDefinitionPropertyCreateRequest } from '../models';
// @ts-ignore
import { CustomEventDefinitionPropertyUpdateRequest } from '../models';
// @ts-ignore
import { CustomEventDefinitionUpdateRequest } from '../models';
// @ts-ignore
import { CustomEventSendRequest } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
/**
 * CustomEventsApi - axios parameter creator
 * @export
 */
const CustomEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a custom event definition.
         * @summary Create an event definition
         * @param {CustomEventDefinitionCreateRequest} customEventDefinitionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefinition: async (customEventDefinitionCreateRequest: CustomEventDefinitionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customEventDefinitionCreateRequest' is not null or undefined
            assertParamExists('createDefinition', 'customEventDefinitionCreateRequest', customEventDefinitionCreateRequest)
            const localVarPath = `/event/definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(customEventDefinitionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Defines a new property for the event definition.
         * @summary Create an event property definition
         * @param {string} name Name of the custom event.
         * @param {CustomEventDefinitionPropertyCreateRequest} customEventDefinitionPropertyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyDefinition: async (name: string, customEventDefinitionPropertyCreateRequest: CustomEventDefinitionPropertyCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createPropertyDefinition', 'name', name)
            // verify required parameter 'customEventDefinitionPropertyCreateRequest' is not null or undefined
            assertParamExists('createPropertyDefinition', 'customEventDefinitionPropertyCreateRequest', customEventDefinitionPropertyCreateRequest)
            const localVarPath = `/event/definitions/{name}/properties`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(customEventDefinitionPropertyCreateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a property of the event definition.
         * @summary Delete an event property definition
         * @param {string} name Name of the custom event.
         * @param {string} propertyName Name of the custom event property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyDefinition: async (name: string, propertyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('propertyDefinition', 'name', name)
            // verify required parameter 'propertyName' is not null or undefined
            assertParamExists('propertyDefinition', 'propertyName', propertyName)
            const localVarPath = `/event/definitions/{name}/properties/{propertyName}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"propertyName"}}`, encodeURIComponent(String(propertyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an event property definition\'s label and description.
         * @summary Update an event property definition
         * @param {string} name Name of the custom event.
         * @param {string} propertyName Name of the custom event property.
         * @param {CustomEventDefinitionPropertyUpdateRequest} customEventDefinitionPropertyUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyDefinition_1: async (name: string, propertyName: string, customEventDefinitionPropertyUpdateRequest: CustomEventDefinitionPropertyUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('propertyDefinition_1', 'name', name)
            // verify required parameter 'propertyName' is not null or undefined
            assertParamExists('propertyDefinition_1', 'propertyName', propertyName)
            // verify required parameter 'customEventDefinitionPropertyUpdateRequest' is not null or undefined
            assertParamExists('propertyDefinition_1', 'customEventDefinitionPropertyUpdateRequest', customEventDefinitionPropertyUpdateRequest)
            const localVarPath = `/event/definitions/{name}/properties/{propertyName}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"propertyName"}}`, encodeURIComponent(String(propertyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(customEventDefinitionPropertyUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a custom event definition you previously created.
         * @summary Retrieve an event definition
         * @param {string} name Name of the custom event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDefinition: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('retrieveDefinition', 'name', name)
            const localVarPath = `/event/definitions/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an event.
         * @summary Send an event
         * @param {CustomEventSendRequest} customEventSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEvent: async (customEventSendRequest: CustomEventSendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customEventSendRequest' is not null or undefined
            assertParamExists('sendEvent', 'customEventSendRequest', customEventSendRequest)
            const localVarPath = `/event/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(customEventSendRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an event definition\'s label and description.
         * @summary Update an event definition
         * @param {string} name Name of the custom event.
         * @param {CustomEventDefinitionUpdateRequest} customEventDefinitionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinition: async (name: string, customEventDefinitionUpdateRequest: CustomEventDefinitionUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateDefinition', 'name', name)
            // verify required parameter 'customEventDefinitionUpdateRequest' is not null or undefined
            assertParamExists('updateDefinition', 'customEventDefinitionUpdateRequest', customEventDefinitionUpdateRequest)
            const localVarPath = `/event/definitions/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(customEventDefinitionUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomEventsApi - functional programming interface
 * @export
 */
const CustomEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a custom event definition.
         * @summary Create an event definition
         * @param {CustomEventDefinitionCreateRequest} customEventDefinitionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDefinition(customEventDefinitionCreateRequest: CustomEventDefinitionCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEventDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDefinition(customEventDefinitionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Defines a new property for the event definition.
         * @summary Create an event property definition
         * @param {string} name Name of the custom event.
         * @param {CustomEventDefinitionPropertyCreateRequest} customEventDefinitionPropertyCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyDefinition(name: string, customEventDefinitionPropertyCreateRequest: CustomEventDefinitionPropertyCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEventDefinitionProperty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyDefinition(name, customEventDefinitionPropertyCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a property of the event definition.
         * @summary Delete an event property definition
         * @param {string} name Name of the custom event.
         * @param {string} propertyName Name of the custom event property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyDefinition(name: string, propertyName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyDefinition(name, propertyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an event property definition\'s label and description.
         * @summary Update an event property definition
         * @param {string} name Name of the custom event.
         * @param {string} propertyName Name of the custom event property.
         * @param {CustomEventDefinitionPropertyUpdateRequest} customEventDefinitionPropertyUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyDefinition_1(name: string, propertyName: string, customEventDefinitionPropertyUpdateRequest: CustomEventDefinitionPropertyUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEventDefinitionProperty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyDefinition_1(name, propertyName, customEventDefinitionPropertyUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a custom event definition you previously created.
         * @summary Retrieve an event definition
         * @param {string} name Name of the custom event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveDefinition(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEventDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveDefinition(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an event.
         * @summary Send an event
         * @param {CustomEventSendRequest} customEventSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEvent(customEventSendRequest: CustomEventSendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEvent(customEventSendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an event definition\'s label and description.
         * @summary Update an event definition
         * @param {string} name Name of the custom event.
         * @param {CustomEventDefinitionUpdateRequest} customEventDefinitionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefinition(name: string, customEventDefinitionUpdateRequest: CustomEventDefinitionUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEventDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefinition(name, customEventDefinitionUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomEventsApi - factory interface
 * @export
 */
const CustomEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomEventsApiFp(configuration)
    return {
        /**
         * Creates a custom event definition.
         * @summary Create an event definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefinition(customEventDefinitionCreateRequest: CustomEventDefinitionCreateRequest, options?: any): AxiosPromise<CustomEventDefinition> {
            return localVarFp.createDefinition(customEventDefinitionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Defines a new property for the event definition.
         * @summary Create an event property definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyDefinition(name: string, customEventDefinitionPropertyCreateRequest: CustomEventDefinitionPropertyCreateRequest, options?: any): AxiosPromise<CustomEventDefinitionProperty> {
            return localVarFp.createPropertyDefinition(name, customEventDefinitionPropertyCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a property of the event definition.
         * @summary Delete an event property definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyDefinition(name: string, propertyName: string, options?: any): AxiosPromise<void> {
            return localVarFp.propertyDefinition(name, propertyName, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an event property definition\'s label and description.
         * @summary Update an event property definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyDefinition_1(name: string, propertyName: string, customEventDefinitionPropertyUpdateRequest: CustomEventDefinitionPropertyUpdateRequest, options?: any): AxiosPromise<CustomEventDefinitionProperty> {
            return localVarFp.propertyDefinition_1(name, propertyName, customEventDefinitionPropertyUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a custom event definition you previously created.
         * @summary Retrieve an event definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDefinition(name: string, options?: any): AxiosPromise<CustomEventDefinition> {
            return localVarFp.retrieveDefinition(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an event.
         * @summary Send an event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEvent(customEventSendRequest: CustomEventSendRequest, options?: any): AxiosPromise<void> {
            return localVarFp.sendEvent(customEventSendRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an event definition\'s label and description.
         * @summary Update an event definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinition(name: string, customEventDefinitionUpdateRequest: CustomEventDefinitionUpdateRequest, options?: any): AxiosPromise<CustomEventDefinition> {
            return localVarFp.updateDefinition(name, customEventDefinitionUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomEventsApi - object-oriented interface
 * @export
 * @class CustomEventsApi
 * @extends {BaseAPI}
 */
export class CustomEventsApi extends BaseAPI {
    /**
     * Creates a custom event definition.
     * @summary Create an event definition
     * @param {CustomEventDefinitionCreateRequest} customEventDefinitionCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public createDefinition(customEventDefinitionCreateRequest: CustomEventDefinitionCreateRequest, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).createDefinition(customEventDefinitionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Defines a new property for the event definition.
     * @summary Create an event property definition
     * @param {string} name Name of the custom event.
     * @param {CustomEventDefinitionPropertyCreateRequest} customEventDefinitionPropertyCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public createPropertyDefinition(name: string, customEventDefinitionPropertyCreateRequest: CustomEventDefinitionPropertyCreateRequest, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).createPropertyDefinition(name, customEventDefinitionPropertyCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a property of the event definition.
     * @summary Delete an event property definition
     * @param {string} name Name of the custom event.
     * @param {string} propertyName Name of the custom event property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public propertyDefinition(name: string, propertyName: string, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).propertyDefinition(name, propertyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an event property definition\'s label and description.
     * @summary Update an event property definition
     * @param {string} name Name of the custom event.
     * @param {string} propertyName Name of the custom event property.
     * @param {CustomEventDefinitionPropertyUpdateRequest} customEventDefinitionPropertyUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public propertyDefinition_1(name: string, propertyName: string, customEventDefinitionPropertyUpdateRequest: CustomEventDefinitionPropertyUpdateRequest, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).propertyDefinition_1(name, propertyName, customEventDefinitionPropertyUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a custom event definition you previously created.
     * @summary Retrieve an event definition
     * @param {string} name Name of the custom event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public retrieveDefinition(name: string, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).retrieveDefinition(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an event.
     * @summary Send an event
     * @param {CustomEventSendRequest} customEventSendRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public sendEvent(customEventSendRequest: CustomEventSendRequest, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).sendEvent(customEventSendRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an event definition\'s label and description.
     * @summary Update an event definition
     * @param {string} name Name of the custom event.
     * @param {CustomEventDefinitionUpdateRequest} customEventDefinitionUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public updateDefinition(name: string, customEventDefinitionUpdateRequest: CustomEventDefinitionUpdateRequest, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).updateDefinition(name, customEventDefinitionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
